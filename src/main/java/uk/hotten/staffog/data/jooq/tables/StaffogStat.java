package uk.hotten.staffog.data.jooq.tables;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.hotten.staffog.data.jooq.Staffog;
import uk.hotten.staffog.data.jooq.tables.records.StaffogStatRecord;

/**
 * This class was generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StaffogStat extends TableImpl<StaffogStatRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>staffog.staffog_stat</code>
	 */
	public static final StaffogStat STAFFOG_STAT = new StaffogStat();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<StaffogStatRecord> getRecordType() {
		return StaffogStatRecord.class;
	}

	/**
	 * The column <code>staffog.staffog_stat.name</code>.
	 */
	public final TableField<StaffogStatRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(2048).nullable(false), this, "");

	/**
	 * The column <code>staffog.staffog_stat.stat</code>.
	 */
	public final TableField<StaffogStatRecord, String> STAT = createField(DSL.name("stat"), SQLDataType.VARCHAR(2048).nullable(false), this, "");

	private StaffogStat(Name alias, Table<StaffogStatRecord> aliased) {
		this(alias, aliased, null);
	}

	private StaffogStat(Name alias, Table<StaffogStatRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>staffog.staffog_stat</code> table reference
	 */
	public StaffogStat(String alias) {
		this(DSL.name(alias), STAFFOG_STAT);
	}

	/**
	 * Create an aliased <code>staffog.staffog_stat</code> table reference
	 */
	public StaffogStat(Name alias) {
		this(alias, STAFFOG_STAT);
	}

	/**
	 * Create a <code>staffog.staffog_stat</code> table reference
	 */
	public StaffogStat() {
		this(DSL.name("staffog_stat"), null);
	}

	public <O extends Record> StaffogStat(Table<O> child, ForeignKey<O, StaffogStatRecord> key) {
		super(child, key, STAFFOG_STAT);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : Staffog.STAFFOG;
	}

	@Override
	public StaffogStat as(String alias) {
		return new StaffogStat(DSL.name(alias), this);
	}

	@Override
	public StaffogStat as(Name alias) {
		return new StaffogStat(alias, this);
	}

	@Override
	public StaffogStat as(Table<?> alias) {
		return new StaffogStat(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public StaffogStat rename(String name) {
		return new StaffogStat(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public StaffogStat rename(Name name) {
		return new StaffogStat(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public StaffogStat rename(Table<?> name) {
		return new StaffogStat(name.getQualifiedName(), null);
	}

	// -------------------------------------------------------------------------
	// Row2 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row2<String, String> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
	 */
	public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
		return convertFrom(Records.mapping(from));
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Class,
	 * Function)}.
	 */
	public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
		return convertFrom(toType, Records.mapping(from));
	}

}