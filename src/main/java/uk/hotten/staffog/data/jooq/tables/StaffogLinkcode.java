package uk.hotten.staffog.data.jooq.tables;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.hotten.staffog.data.jooq.Keys;
import uk.hotten.staffog.data.jooq.Staffog;
import uk.hotten.staffog.data.jooq.tables.records.StaffogLinkcodeRecord;

/**
 * This class was generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StaffogLinkcode extends TableImpl<StaffogLinkcodeRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>staffog.staffog_linkcode</code>
	 */
	public static final StaffogLinkcode STAFFOG_LINKCODE = new StaffogLinkcode();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<StaffogLinkcodeRecord> getRecordType() {
		return StaffogLinkcodeRecord.class;
	}

	/**
	 * The column <code>staffog.staffog_linkcode.uuid</code>.
	 */
	public final TableField<StaffogLinkcodeRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

	/**
	 * The column <code>staffog.staffog_linkcode.code</code>.
	 */
	public final TableField<StaffogLinkcodeRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(5).nullable(false), this, "");

	/**
	 * The column <code>staffog.staffog_linkcode.admin</code>.
	 */
	public final TableField<StaffogLinkcodeRecord, Boolean> ADMIN = createField(DSL.name("admin"), SQLDataType.BIT.nullable(false), this, "");

	private StaffogLinkcode(Name alias, Table<StaffogLinkcodeRecord> aliased) {
		this(alias, aliased, null);
	}

	private StaffogLinkcode(Name alias, Table<StaffogLinkcodeRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>staffog.staffog_linkcode</code> table reference
	 */
	public StaffogLinkcode(String alias) {
		this(DSL.name(alias), STAFFOG_LINKCODE);
	}

	/**
	 * Create an aliased <code>staffog.staffog_linkcode</code> table reference
	 */
	public StaffogLinkcode(Name alias) {
		this(alias, STAFFOG_LINKCODE);
	}

	/**
	 * Create a <code>staffog.staffog_linkcode</code> table reference
	 */
	public StaffogLinkcode() {
		this(DSL.name("staffog_linkcode"), null);
	}

	public <O extends Record> StaffogLinkcode(Table<O> child, ForeignKey<O, StaffogLinkcodeRecord> key) {
		super(child, key, STAFFOG_LINKCODE);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : Staffog.STAFFOG;
	}

	@Override
	public List<UniqueKey<StaffogLinkcodeRecord>> getUniqueKeys() {
		return Arrays.asList(Keys.KEY_STAFFOG_LINKCODE_UUID);
	}

	@Override
	public StaffogLinkcode as(String alias) {
		return new StaffogLinkcode(DSL.name(alias), this);
	}

	@Override
	public StaffogLinkcode as(Name alias) {
		return new StaffogLinkcode(alias, this);
	}

	@Override
	public StaffogLinkcode as(Table<?> alias) {
		return new StaffogLinkcode(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public StaffogLinkcode rename(String name) {
		return new StaffogLinkcode(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public StaffogLinkcode rename(Name name) {
		return new StaffogLinkcode(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public StaffogLinkcode rename(Table<?> name) {
		return new StaffogLinkcode(name.getQualifiedName(), null);
	}

	// -------------------------------------------------------------------------
	// Row3 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row3<String, String, Boolean> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
	 */
	public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super Boolean, ? extends U> from) {
		return convertFrom(Records.mapping(from));
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Class,
	 * Function)}.
	 */
	public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super Boolean, ? extends U> from) {
		return convertFrom(toType, Records.mapping(from));
	}

}