package uk.hotten.staffog.data.jooq.tables;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.hotten.staffog.data.jooq.Keys;
import uk.hotten.staffog.data.jooq.Staffog;
import uk.hotten.staffog.data.jooq.tables.records.StaffogAppealRecord;

/**
 * This class was generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StaffogAppeal extends TableImpl<StaffogAppealRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>staffog.staffog_appeal</code>
	 */
	public static final StaffogAppeal STAFFOG_APPEAL = new StaffogAppeal();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<StaffogAppealRecord> getRecordType() {
		return StaffogAppealRecord.class;
	}

	/**
	 * The column <code>staffog.staffog_appeal.id</code>.
	 */
	public final TableField<StaffogAppealRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

	/**
	 * The column <code>staffog.staffog_appeal.uuid</code>.
	 */
	public final TableField<StaffogAppealRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

	/**
	 * The column <code>staffog.staffog_appeal.time</code>.
	 */
	public final TableField<StaffogAppealRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>staffog.staffog_appeal.type</code>.
	 */
	public final TableField<StaffogAppealRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(128).nullable(false), this, "");

	/**
	 * The column <code>staffog.staffog_appeal.pid</code>.
	 */
	public final TableField<StaffogAppealRecord, Integer> PID = createField(DSL.name("pid"), SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>staffog.staffog_appeal.reason</code>.
	 */
	public final TableField<StaffogAppealRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(2048).nullable(false), this, "");

	/**
	 * The column <code>staffog.staffog_appeal.evidence</code>.
	 */
	public final TableField<StaffogAppealRecord, String> EVIDENCE = createField(DSL.name("evidence"), SQLDataType.VARCHAR(2048).nullable(false).defaultValue(DSL.inline("[]", SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>staffog.staffog_appeal.open</code>.
	 */
	public final TableField<StaffogAppealRecord, Boolean> OPEN = createField(DSL.name("open"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'1'", SQLDataType.BIT)), this, "");

	/**
	 * The column <code>staffog.staffog_appeal.assigned</code>.
	 */
	public final TableField<StaffogAppealRecord, String> ASSIGNED = createField(DSL.name("assigned"), SQLDataType.VARCHAR(36), this, "");

	/**
	 * The column <code>staffog.staffog_appeal.verdict</code>.
	 */
	public final TableField<StaffogAppealRecord, Boolean> VERDICT = createField(DSL.name("verdict"), SQLDataType.BIT, this, "");

	/**
	 * The column <code>staffog.staffog_appeal.verdict_time</code>.
	 */
	public final TableField<StaffogAppealRecord, Long> VERDICT_TIME = createField(DSL.name("verdict_time"), SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>staffog.staffog_appeal.comment</code>.
	 */
	public final TableField<StaffogAppealRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(2048), this, "");

	private StaffogAppeal(Name alias, Table<StaffogAppealRecord> aliased) {
		this(alias, aliased, null);
	}

	private StaffogAppeal(Name alias, Table<StaffogAppealRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>staffog.staffog_appeal</code> table reference
	 */
	public StaffogAppeal(String alias) {
		this(DSL.name(alias), STAFFOG_APPEAL);
	}

	/**
	 * Create an aliased <code>staffog.staffog_appeal</code> table reference
	 */
	public StaffogAppeal(Name alias) {
		this(alias, STAFFOG_APPEAL);
	}

	/**
	 * Create a <code>staffog.staffog_appeal</code> table reference
	 */
	public StaffogAppeal() {
		this(DSL.name("staffog_appeal"), null);
	}

	public <O extends Record> StaffogAppeal(Table<O> child, ForeignKey<O, StaffogAppealRecord> key) {
		super(child, key, STAFFOG_APPEAL);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : Staffog.STAFFOG;
	}

	@Override
	public Identity<StaffogAppealRecord, Integer> getIdentity() {
		return (Identity<StaffogAppealRecord, Integer>) super.getIdentity();
	}

	@Override
	public UniqueKey<StaffogAppealRecord> getPrimaryKey() {
		return Keys.KEY_STAFFOG_APPEAL_PRIMARY;
	}

	@Override
	public StaffogAppeal as(String alias) {
		return new StaffogAppeal(DSL.name(alias), this);
	}

	@Override
	public StaffogAppeal as(Name alias) {
		return new StaffogAppeal(alias, this);
	}

	@Override
	public StaffogAppeal as(Table<?> alias) {
		return new StaffogAppeal(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public StaffogAppeal rename(String name) {
		return new StaffogAppeal(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public StaffogAppeal rename(Name name) {
		return new StaffogAppeal(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public StaffogAppeal rename(Table<?> name) {
		return new StaffogAppeal(name.getQualifiedName(), null);
	}

	// -------------------------------------------------------------------------
	// Row12 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row12<Integer, String, Long, String, Integer, String, String, Boolean, String, Boolean, Long, String> fieldsRow() {
		return (Row12) super.fieldsRow();
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
	 */
	public <U> SelectField<U> mapping(Function12<? super Integer, ? super String, ? super Long, ? super String, ? super Integer, ? super String, ? super String, ? super Boolean, ? super String, ? super Boolean, ? super Long, ? super String, ? extends U> from) {
		return convertFrom(Records.mapping(from));
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Class,
	 * Function)}.
	 */
	public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Integer, ? super String, ? super Long, ? super String, ? super Integer, ? super String, ? super String, ? super Boolean, ? super String, ? super Boolean, ? super Long, ? super String, ? extends U> from) {
		return convertFrom(toType, Records.mapping(from));
	}

}