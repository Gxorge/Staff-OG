package uk.hotten.staffog.data.jooq.tables;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.hotten.staffog.data.jooq.Keys;
import uk.hotten.staffog.data.jooq.Staffog;
import uk.hotten.staffog.data.jooq.tables.records.StaffogHistoryRecord;

/**
 * This class was generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StaffogHistory extends TableImpl<StaffogHistoryRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>staffog.staffog_history</code>
	 */
	public static final StaffogHistory STAFFOG_HISTORY = new StaffogHistory();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<StaffogHistoryRecord> getRecordType() {
		return StaffogHistoryRecord.class;
	}

	/**
	 * The column <code>staffog.staffog_history.id</code>.
	 */
	public final TableField<StaffogHistoryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

	/**
	 * The column <code>staffog.staffog_history.date</code>.
	 */
	public final TableField<StaffogHistoryRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

	/**
	 * The column <code>staffog.staffog_history.name</code>.
	 */
	public final TableField<StaffogHistoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(16).nullable(false), this, "");

	/**
	 * The column <code>staffog.staffog_history.uuid</code>.
	 */
	public final TableField<StaffogHistoryRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

	private StaffogHistory(Name alias, Table<StaffogHistoryRecord> aliased) {
		this(alias, aliased, null);
	}

	private StaffogHistory(Name alias, Table<StaffogHistoryRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>staffog.staffog_history</code> table reference
	 */
	public StaffogHistory(String alias) {
		this(DSL.name(alias), STAFFOG_HISTORY);
	}

	/**
	 * Create an aliased <code>staffog.staffog_history</code> table reference
	 */
	public StaffogHistory(Name alias) {
		this(alias, STAFFOG_HISTORY);
	}

	/**
	 * Create a <code>staffog.staffog_history</code> table reference
	 */
	public StaffogHistory() {
		this(DSL.name("staffog_history"), null);
	}

	public <O extends Record> StaffogHistory(Table<O> child, ForeignKey<O, StaffogHistoryRecord> key) {
		super(child, key, STAFFOG_HISTORY);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : Staffog.STAFFOG;
	}

	@Override
	public Identity<StaffogHistoryRecord, Integer> getIdentity() {
		return (Identity<StaffogHistoryRecord, Integer>) super.getIdentity();
	}

	@Override
	public UniqueKey<StaffogHistoryRecord> getPrimaryKey() {
		return Keys.KEY_STAFFOG_HISTORY_PRIMARY;
	}

	@Override
	public StaffogHistory as(String alias) {
		return new StaffogHistory(DSL.name(alias), this);
	}

	@Override
	public StaffogHistory as(Name alias) {
		return new StaffogHistory(alias, this);
	}

	@Override
	public StaffogHistory as(Table<?> alias) {
		return new StaffogHistory(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public StaffogHistory rename(String name) {
		return new StaffogHistory(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public StaffogHistory rename(Name name) {
		return new StaffogHistory(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public StaffogHistory rename(Table<?> name) {
		return new StaffogHistory(name.getQualifiedName(), null);
	}

	// -------------------------------------------------------------------------
	// Row4 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row4<Integer, LocalDateTime, String, String> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
	 */
	public <U> SelectField<U> mapping(Function4<? super Integer, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
		return convertFrom(Records.mapping(from));
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Class,
	 * Function)}.
	 */
	public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super LocalDateTime, ? super String, ? super String, ? extends U> from) {
		return convertFrom(toType, Records.mapping(from));
	}

}