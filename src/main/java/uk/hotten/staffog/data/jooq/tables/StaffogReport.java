/*
 * This file is generated by jOOQ.
 */
package uk.hotten.staffog.data.jooq.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.hotten.staffog.data.jooq.Keys;
import uk.hotten.staffog.data.jooq.Staffog;
import uk.hotten.staffog.data.jooq.tables.records.StaffogReportRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StaffogReport extends TableImpl<StaffogReportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>staffog.staffog_report</code>
     */
    public static final StaffogReport STAFFOG_REPORT = new StaffogReport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StaffogReportRecord> getRecordType() {
        return StaffogReportRecord.class;
    }

    /**
     * The column <code>staffog.staffog_report.id</code>.
     */
    public final TableField<StaffogReportRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>staffog.staffog_report.uuid</code>.
     */
    public final TableField<StaffogReportRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_report.by_uuid</code>.
     */
    public final TableField<StaffogReportRecord, String> BY_UUID = createField(DSL.name("by_uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_report.time</code>.
     */
    public final TableField<StaffogReportRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_report.type</code>.
     */
    public final TableField<StaffogReportRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_report.reason</code>.
     */
    public final TableField<StaffogReportRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(2048).nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_report.crid</code>.
     */
    public final TableField<StaffogReportRecord, Integer> CRID = createField(DSL.name("crid"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>staffog.staffog_report.open</code>.
     */
    public final TableField<StaffogReportRecord, Boolean> OPEN = createField(DSL.name("open"), SQLDataType.BIT.nullable(false).defaultValue(DSL.inline("b'1'", SQLDataType.BIT)), this, "");

    /**
     * The column <code>staffog.staffog_report.assigned</code>.
     */
    public final TableField<StaffogReportRecord, String> ASSIGNED = createField(DSL.name("assigned"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>staffog.staffog_report.verdict</code>.
     */
    public final TableField<StaffogReportRecord, Boolean> VERDICT = createField(DSL.name("verdict"), SQLDataType.BIT, this, "");

    /**
     * The column <code>staffog.staffog_report.verdict_time</code>.
     */
    public final TableField<StaffogReportRecord, Long> VERDICT_TIME = createField(DSL.name("verdict_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>staffog.staffog_report.comment</code>.
     */
    public final TableField<StaffogReportRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(2048), this, "");

    private StaffogReport(Name alias, Table<StaffogReportRecord> aliased) {
        this(alias, aliased, null);
    }

    private StaffogReport(Name alias, Table<StaffogReportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>staffog.staffog_report</code> table reference
     */
    public StaffogReport(String alias) {
        this(DSL.name(alias), STAFFOG_REPORT);
    }

    /**
     * Create an aliased <code>staffog.staffog_report</code> table reference
     */
    public StaffogReport(Name alias) {
        this(alias, STAFFOG_REPORT);
    }

    /**
     * Create a <code>staffog.staffog_report</code> table reference
     */
    public StaffogReport() {
        this(DSL.name("staffog_report"), null);
    }

    public <O extends Record> StaffogReport(Table<O> child, ForeignKey<O, StaffogReportRecord> key) {
        super(child, key, STAFFOG_REPORT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Staffog.STAFFOG;
    }

    @Override
    public Identity<StaffogReportRecord, Integer> getIdentity() {
        return (Identity<StaffogReportRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StaffogReportRecord> getPrimaryKey() {
        return Keys.KEY_STAFFOG_REPORT_PRIMARY;
    }

    @Override
    public StaffogReport as(String alias) {
        return new StaffogReport(DSL.name(alias), this);
    }

    @Override
    public StaffogReport as(Name alias) {
        return new StaffogReport(alias, this);
    }

    @Override
    public StaffogReport as(Table<?> alias) {
        return new StaffogReport(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StaffogReport rename(String name) {
        return new StaffogReport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StaffogReport rename(Name name) {
        return new StaffogReport(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StaffogReport rename(Table<?> name) {
        return new StaffogReport(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, String, Long, String, String, Integer, Boolean, String, Boolean, Long, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Integer, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super Integer, ? super Boolean, ? super String, ? super Boolean, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Integer, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super Integer, ? super Boolean, ? super String, ? super Boolean, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
