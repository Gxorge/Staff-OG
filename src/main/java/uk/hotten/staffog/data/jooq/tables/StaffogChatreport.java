/*
 * This file is generated by jOOQ.
 */
package uk.hotten.staffog.data.jooq.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.hotten.staffog.data.jooq.Keys;
import uk.hotten.staffog.data.jooq.Staffog;
import uk.hotten.staffog.data.jooq.tables.records.StaffogChatreportRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StaffogChatreport extends TableImpl<StaffogChatreportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>staffog.staffog_chatreport</code>
     */
    public static final StaffogChatreport STAFFOG_CHATREPORT = new StaffogChatreport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StaffogChatreportRecord> getRecordType() {
        return StaffogChatreportRecord.class;
    }

    /**
     * The column <code>staffog.staffog_chatreport.id</code>.
     */
    public final TableField<StaffogChatreportRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>staffog.staffog_chatreport.uuid</code>.
     */
    public final TableField<StaffogChatreportRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_chatreport.by_uuid</code>.
     */
    public final TableField<StaffogChatreportRecord, String> BY_UUID = createField(DSL.name("by_uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_chatreport.time</code>.
     */
    public final TableField<StaffogChatreportRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_chatreport.messages</code>.
     */
    public final TableField<StaffogChatreportRecord, String> MESSAGES = createField(DSL.name("messages"), SQLDataType.VARCHAR(2048).nullable(false), this, "");

    private StaffogChatreport(Name alias, Table<StaffogChatreportRecord> aliased) {
        this(alias, aliased, null);
    }

    private StaffogChatreport(Name alias, Table<StaffogChatreportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>staffog.staffog_chatreport</code> table reference
     */
    public StaffogChatreport(String alias) {
        this(DSL.name(alias), STAFFOG_CHATREPORT);
    }

    /**
     * Create an aliased <code>staffog.staffog_chatreport</code> table reference
     */
    public StaffogChatreport(Name alias) {
        this(alias, STAFFOG_CHATREPORT);
    }

    /**
     * Create a <code>staffog.staffog_chatreport</code> table reference
     */
    public StaffogChatreport() {
        this(DSL.name("staffog_chatreport"), null);
    }

    public <O extends Record> StaffogChatreport(Table<O> child, ForeignKey<O, StaffogChatreportRecord> key) {
        super(child, key, STAFFOG_CHATREPORT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Staffog.STAFFOG;
    }

    @Override
    public Identity<StaffogChatreportRecord, Integer> getIdentity() {
        return (Identity<StaffogChatreportRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StaffogChatreportRecord> getPrimaryKey() {
        return Keys.KEY_STAFFOG_CHATREPORT_PRIMARY;
    }

    @Override
    public StaffogChatreport as(String alias) {
        return new StaffogChatreport(DSL.name(alias), this);
    }

    @Override
    public StaffogChatreport as(Name alias) {
        return new StaffogChatreport(alias, this);
    }

    @Override
    public StaffogChatreport as(Table<?> alias) {
        return new StaffogChatreport(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StaffogChatreport rename(String name) {
        return new StaffogChatreport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StaffogChatreport rename(Name name) {
        return new StaffogChatreport(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StaffogChatreport rename(Table<?> name) {
        return new StaffogChatreport(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Long, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
