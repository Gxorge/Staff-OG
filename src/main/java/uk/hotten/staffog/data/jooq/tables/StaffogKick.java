/*
 * This file is generated by jOOQ.
 */
package uk.hotten.staffog.data.jooq.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.hotten.staffog.data.jooq.Keys;
import uk.hotten.staffog.data.jooq.Staffog;
import uk.hotten.staffog.data.jooq.tables.records.StaffogKickRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StaffogKick extends TableImpl<StaffogKickRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>staffog.staffog_kick</code>
     */
    public static final StaffogKick STAFFOG_KICK = new StaffogKick();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StaffogKickRecord> getRecordType() {
        return StaffogKickRecord.class;
    }

    /**
     * The column <code>staffog.staffog_kick.id</code>.
     */
    public final TableField<StaffogKickRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>staffog.staffog_kick.uuid</code>.
     */
    public final TableField<StaffogKickRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_kick.reason</code>.
     */
    public final TableField<StaffogKickRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(2048).nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_kick.by_uuid</code>.
     */
    public final TableField<StaffogKickRecord, String> BY_UUID = createField(DSL.name("by_uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_kick.by_name</code>.
     */
    public final TableField<StaffogKickRecord, String> BY_NAME = createField(DSL.name("by_name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_kick.time</code>.
     */
    public final TableField<StaffogKickRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT.nullable(false), this, "");

    private StaffogKick(Name alias, Table<StaffogKickRecord> aliased) {
        this(alias, aliased, null);
    }

    private StaffogKick(Name alias, Table<StaffogKickRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>staffog.staffog_kick</code> table reference
     */
    public StaffogKick(String alias) {
        this(DSL.name(alias), STAFFOG_KICK);
    }

    /**
     * Create an aliased <code>staffog.staffog_kick</code> table reference
     */
    public StaffogKick(Name alias) {
        this(alias, STAFFOG_KICK);
    }

    /**
     * Create a <code>staffog.staffog_kick</code> table reference
     */
    public StaffogKick() {
        this(DSL.name("staffog_kick"), null);
    }

    public <O extends Record> StaffogKick(Table<O> child, ForeignKey<O, StaffogKickRecord> key) {
        super(child, key, STAFFOG_KICK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Staffog.STAFFOG;
    }

    @Override
    public Identity<StaffogKickRecord, Long> getIdentity() {
        return (Identity<StaffogKickRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StaffogKickRecord> getPrimaryKey() {
        return Keys.KEY_STAFFOG_KICK_PRIMARY;
    }

    @Override
    public StaffogKick as(String alias) {
        return new StaffogKick(DSL.name(alias), this);
    }

    @Override
    public StaffogKick as(Name alias) {
        return new StaffogKick(alias, this);
    }

    @Override
    public StaffogKick as(Table<?> alias) {
        return new StaffogKick(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StaffogKick rename(String name) {
        return new StaffogKick(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StaffogKick rename(Name name) {
        return new StaffogKick(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StaffogKick rename(Table<?> name) {
        return new StaffogKick(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, String, String, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super String, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
