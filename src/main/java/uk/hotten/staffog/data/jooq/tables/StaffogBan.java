/*
 * This file is generated by jOOQ.
 */
package uk.hotten.staffog.data.jooq.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import uk.hotten.staffog.data.jooq.Keys;
import uk.hotten.staffog.data.jooq.Staffog;
import uk.hotten.staffog.data.jooq.tables.records.StaffogBanRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StaffogBan extends TableImpl<StaffogBanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>staffog.staffog_ban</code>
     */
    public static final StaffogBan STAFFOG_BAN = new StaffogBan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StaffogBanRecord> getRecordType() {
        return StaffogBanRecord.class;
    }

    /**
     * The column <code>staffog.staffog_ban.id</code>.
     */
    public final TableField<StaffogBanRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>staffog.staffog_ban.uuid</code>.
     */
    public final TableField<StaffogBanRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_ban.reason</code>.
     */
    public final TableField<StaffogBanRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.VARCHAR(2048).nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_ban.by_uuid</code>.
     */
    public final TableField<StaffogBanRecord, String> BY_UUID = createField(DSL.name("by_uuid"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>staffog.staffog_ban.by_name</code>.
     */
    public final TableField<StaffogBanRecord, String> BY_NAME = createField(DSL.name("by_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>staffog.staffog_ban.removed_uuid</code>.
     */
    public final TableField<StaffogBanRecord, String> REMOVED_UUID = createField(DSL.name("removed_uuid"), SQLDataType.VARCHAR(36), this, "");

    /**
     * The column <code>staffog.staffog_ban.removed_name</code>.
     */
    public final TableField<StaffogBanRecord, String> REMOVED_NAME = createField(DSL.name("removed_name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>staffog.staffog_ban.removed_reason</code>.
     */
    public final TableField<StaffogBanRecord, String> REMOVED_REASON = createField(DSL.name("removed_reason"), SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>staffog.staffog_ban.removed_time</code>.
     */
    public final TableField<StaffogBanRecord, Long> REMOVED_TIME = createField(DSL.name("removed_time"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>staffog.staffog_ban.time</code>.
     */
    public final TableField<StaffogBanRecord, Long> TIME = createField(DSL.name("time"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_ban.until</code>.
     */
    public final TableField<StaffogBanRecord, Long> UNTIL = createField(DSL.name("until"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>staffog.staffog_ban.active</code>.
     */
    public final TableField<StaffogBanRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BIT.nullable(false), this, "");

    private StaffogBan(Name alias, Table<StaffogBanRecord> aliased) {
        this(alias, aliased, null);
    }

    private StaffogBan(Name alias, Table<StaffogBanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>staffog.staffog_ban</code> table reference
     */
    public StaffogBan(String alias) {
        this(DSL.name(alias), STAFFOG_BAN);
    }

    /**
     * Create an aliased <code>staffog.staffog_ban</code> table reference
     */
    public StaffogBan(Name alias) {
        this(alias, STAFFOG_BAN);
    }

    /**
     * Create a <code>staffog.staffog_ban</code> table reference
     */
    public StaffogBan() {
        this(DSL.name("staffog_ban"), null);
    }

    public <O extends Record> StaffogBan(Table<O> child, ForeignKey<O, StaffogBanRecord> key) {
        super(child, key, STAFFOG_BAN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Staffog.STAFFOG;
    }

    @Override
    public Identity<StaffogBanRecord, Long> getIdentity() {
        return (Identity<StaffogBanRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StaffogBanRecord> getPrimaryKey() {
        return Keys.KEY_STAFFOG_BAN_PRIMARY;
    }

    @Override
    public StaffogBan as(String alias) {
        return new StaffogBan(DSL.name(alias), this);
    }

    @Override
    public StaffogBan as(Name alias) {
        return new StaffogBan(alias, this);
    }

    @Override
    public StaffogBan as(Table<?> alias) {
        return new StaffogBan(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StaffogBan rename(String name) {
        return new StaffogBan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StaffogBan rename(Name name) {
        return new StaffogBan(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StaffogBan rename(Table<?> name) {
        return new StaffogBan(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, String, String, String, String, String, String, Long, Long, Long, Boolean> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super Long, ? super Long, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
