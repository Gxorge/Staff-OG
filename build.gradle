plugins {
	
    id 'java' // Tell gradle this is a java project.
    id 'com.github.johnrengelman.shadow' version '8.1.1' // Import utility to package libraries into .jar file.
    id 'eclipse' // Import eclipse plugin for IDE integration.

}

java {
 
	// Declare java version.
 	sourceCompatibility = JavaVersion.VERSION_17

}

group = 'uk.hotten.staffog'
version = '1.0-beta'

def apiVersion = "1.19" // Declare minecraft server target version.

processResources {

    def props = [
        version: version,
        apiVersion: apiVersion,
    ]

    inputs.properties props // Indicates to rerun if version changes.

    filesMatching("plugin.yml") {

        expand props

    }

}

repositories {

    mavenCentral()

    maven {

        url "https://repo.purpurmc.org/snapshots" // Get purpur API from purpur maven repository.

    }
    
    maven {
    
        url "https://jitpack.io"
    
    }

}

dependencies {
    compileOnly 'com.google.code.gson:gson:2.10.1'
    compileOnly 'commons-io:commons-io:2.11.0'
    compileOnly 'org.apache.commons:commons-pool2:2.11.1'
    implementation 'org.jooq:jooq:3.18.4'
    compileOnly 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    compileOnly 'org.mariadb.jdbc:mariadb-java-client:3.1.3'
    compileOnly 'mysql:mysql-connector-java:8.0.32'
    compileOnly 'org.purpurmc.purpur:purpur-api:1.19.4-R0.1-SNAPSHOT'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
}

tasks.register('updatePluginYmlVersion') {
    doLast {
        def file = file('src/main/resources/plugin.yml')
        def lines = file.readLines()
        lines[2] = "version: ${version}-" + getCurrentGitBranch()
        file.write(lines.join("\n"))
    }
}

def revertPluginYmlVersion() {
    def file = file('src/main/resources/plugin.yml')
    def lines = file.readLines()
    lines[2] = "version: ${version}"
    file.write(lines.join("\n"))
}

def getCurrentGitBranch() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }

        if (stdout.toString().toLowerCase().trim().equals("head")) {
            return "ogsuite";
        }

        return stdout.toString().trim()
    } catch (ignored) {
        return 'unknown'
    }
}

shadowJar {
    minimize()
    archiveClassifier.set(getCurrentGitBranch())
    doLast {
        revertPluginYmlVersion()
    }
}

tasks.shadowJar.configure {

    archiveClassifier = null

}

tasks.withType(JavaCompile).configureEach {

    options.compilerArgs += ["-parameters"]
    options.encoding = 'UTF-8' // Override the system character set with a universal set.
    options.fork = true // Enable compilation in a separate daemon process.

}

compileJava.dependsOn updatePluginYmlVersion
